#include<iostream>
#include<algorithm>
#include<vector>
#include<stack>
using namespace std;

// // Next Smaller Element or Next Smaller from Right 
// // HackerBlocks Problem

// Sample Input
// 1
// 5
// 4 5 2 10 8

// Sample Output
// 2 2 -1 8 -1
vector<long long> nextSmallerElement(vector<long long> arr, int n){
    vector<long long> v; // creating a vector for storing result 
    stack <long long> s; // creating a stack for temp. hold the values from array
    for (int i=n-1;i>=0;i--){
      if(s.size() ==0) // whe
// n stack size is empty there is no element in stack return output as -1;
        v.push_back(-1);
        // in this i only push when out s.top()<arr[i]
      else if (s.size()>0 && s.top()<arr[i]) // when there is element in stack and stack top is smaller then array element 
      {
        v.push_back(s.top()); // take stack top in the result vector 
      }
      
      else if (s.size()>0 && s.top()>=arr[i]) // when there is element in stack and that element is greater then array element 
      {
        while(s.size()>0 && s.top()>=arr[i]) // upto when there is element and stack top is greater then array's element delete the element from stack
        {
          s.pop(); // delete the element from stack
        }
	// if anyone of the above while codition is over two case are below -
        if (s.size()==0) // when stack became empty return -1
        {
          v.push_back(-1);
        }
        else
        {
          v.push_back(s.top()); // else push stack top in the vector 
        }
      }
      s.push(arr[i]); // push array in stack
    }
    reverse(v.begin(),v.end()); // while returning reverse the vector and return it.
    
	for (int i = 0; i < n; i++)
    {

		cout << v[i]<< " ";
    }
    return v;
  }

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    int n;
    cin>>n;
    vector<long long>arr(n);
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    nextSmallerElement(arr,n);
    }

    return 0;
}
